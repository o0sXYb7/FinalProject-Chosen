<div id="app">
    <div class="table-header mb-2">
        <h3 class="fw-bolder">
            儲值紀錄
        </h3>
    </div>


    <div class="d-flex mb-2">

        <div class="d-flex align-items-end me-auto">
            <span style="min-width:35px">每頁:</span>
            <select class="form-select form-select-sm" @@change="selectPerPage" v-model="savedPageLength">
                <option v-for="(item,index) in perpage" :key="index" :value="item">{{item}}</option>
            </select>
            <span>筆</span>
        </div>

        <div class="d-flex">
            <select class="form-select form-select-sm" v-model.trim="nowFilter">
                <option v-for="(item,index) in filterList" :key="index" :value="item">{{item}}</option>
            </select>
            <div class="input-group input-group-merge" style="min-width:250px">
                <span class="input-group-text" id="basic-addon-search31"><i class="bx bx-search"></i></span>
                <input type="text"
                       class="form-control"
                       placeholder="Search..."
                       aria-label="Search..."
                       aria-describedby="basic-addon-search31"
                       v-model="searchInput"
                       @@keyup="filterDataPage" />
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table id="mainTable"
               class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th class="center">
                        <label>
                            <input type="checkbox" />
                            <span class="lbl"></span>
                        </label>
                    </th>
                    <th>儲值ID</th>
                    <th>支付狀態</th>
                    <th>儲值金額</th>
                    <th>會員ID</th>
                    <th>支付方式</th>

                    <th>付款期限</th>
                    <th>付款時間</th>

                    <th>功能</th>
                </tr>
            </thead>

            <tbody>
                <tr v-for="item in filterPageData">
                    <td class="center">
                        <label>
                            <input type="checkbox" />
                            <span class="lbl"></span>
                        </label>
                    </td>
                    <td>{{item.merchantOrderNo}}</td>
                    <td>{{item.status}}</td>
                    <td>{{item.amt}}</td>
                    <td>{{item.memberId}}</td>
                    <td>{{item.paymentType}}</td>
                    <td>{{item.expireDate}}</td>
                    <td>{{item.payTime}}</td>

                    <td>{{ item.deadline ? item.deadline.slice(0, 10) : '' }}</td>
                    <td>
                        <a @@click="modelType='detail',openModelToUpdate(item.commodityId)" data-bs-toggle="modal" data-bs-target="#showDetail"><i class="tf-icons bx bxs-book text-info"></i></a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="col-md justify-content-center" :class="{'d-none':loading,'d-flex':!loading}">
        <div class="demo-inline-spacing">
            <div class="spinner-border spinner-border-lg text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end flex-wrap">

            <li :class="{'disabled':nowPage==1,'page-item':true,'prev':true}" @@click="nowPage>1 ? nowPage-- : nowPage =1">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-left"></i>
                </a>
            </li>

            <li :class="{'active':item==nowPage,'page-item':true}" v-for="item in paginationNum" @@click="nowPage = item">
                <a class="page-link">{{item}}</a>
            </li>

            <li :class="{'disabled':nowPage==paginationNum,'page-item':true,'next':true}" @@click="nowPage<paginationNum ? nowPage++ : nowPage =paginationNum">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-right"></i>
                </a>
            </li>

        </ul>
    </nav>

    <!-- Modal -->
    <div class="modal fade" id="showDetail" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" id="modalContext">
                <form asp-controller="ShowRawards" asp-action="UpdateRawardLibs">

                    <div class="modal-header">
                        <template v-if="modelType=='detial'">
                            <h4 class="modal-title fw-bolder" id="showDetailLabel">詳細資料</h4>
                        </template>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table-specil">
                            <tbody>
                                <template v-if="modelType == 'detail'">
                                    <tr>
                                        <th>商品ID</th>
                                        <td>
                                            <input class="form-control" readonly v-model="commodityId" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>暫存倉ID</th>
                                        <td>
                                            <input class="form-control" readonly v-model="tempStorageId" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>會員ID</th>
                                        <td>
                                            <input class="form-control" readonly v-model="memberId" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>名稱</th>
                                        <td>
                                            <input class="form-control" readonly v-model="commodityName" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>數量</th>
                                        <td>
                                            <input class="form-control" readonly v-model="commodityQuantity" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>單價</th>
                                        <td>
                                            <input class="form-control" readonly v-model="commodityUnitPrice" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>截止日期</th>
                                        <td>
                                            <input class="form-control" readonly v-model="deadline" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>上架狀態</th>
                                        <td>
                                            <input class="form-control" readonly v-model="onShelves" />
                                        </td>
                                    </tr>
                                </template>

                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button @@click="clrarModal()" type="button" class="btn btn-secondary text-white" data-bs-dismiss="modal">關閉</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>
@section Scripts
    {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        let vueApp = {

            data() {
                return {
                    //初始資料
                    dbData: [],
                    dbDataLen: 0,
                    //過濾項目
                    filterList: ["全部", "商品ID", "暫存倉ID", "會員ID", "截止時間"],
                    nowFilter: "全部",
                    searchInput: "",
                    //MODAL目前顯示資料
                    commodityId: null,
                    tempStorageId: null,
                    memberId: null,
                    commodityName: '',
                    commodityQuantity: null,
                    commodityUnitPrice: null,
                    deadline: '',
                    onShelves: null,
                    //錯誤訊息
                    ErrorTitle: [],
                    ErrorMessage: [],
                    //pagination
                    nowPage: 1,
                    paginationNum: null,
                    //per page
                    savedPageLength: null,
                    defaultPageLength: 10,
                    perpage: [10, 25, 50, 100],
                    //loading control
                    loading: true,
                    //目前Model是哪一種
                    modelType: '',
                    //圖片的 select
                    selectSeriesList: [],
                    selectNamesList: [],
                    selectImageList: [],
                    nowSelectSeries: '',
                    nowSelectName: '',
                    //圖庫地址
                    imageAddress: `/img/webDataPicture/`,
                }
            },
            methods: {
                getCookie(name) {
                    // 取得 Cookie
                    let cookieValue = null;
                    if (document.cookie && document.cookie !== '') {
                        let cookies = document.cookie.split(';');
                        for (var i = 0; i < cookies.length; i++) {
                            let cookie = cookies[i].trim();
                            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                break;
                            }
                        }
                    }
                    return cookieValue;
                },
                setCookie(name, value, days) {
                    // 設定 Cookie
                    let expires = '';
                    if (days) {
                        let date = new Date();
                        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                        expires = '; expires=' + date.toUTCString(); //存入cookie中的過期時間
                    }
                    document.cookie = name + '=' + encodeURIComponent(value) + expires + '; path=/';
                },
                getRawardLibs() {
                    let _this = this;
                    _this.loading = false;
                    axios.get(`@Url.Action("getPayments","Payments")`)
                        .then((res) => {
                            //console.log(res.data);
                            _this.dbData = res.data;
                            _this.dbDataLen = res.data.length;

                            //初始pagation
                            _this.filterDataPage();
                            _this.loading = true;

                            //取得 Image
                            //axios.get(`@Url.Action("getImageStores","ImageStores")`)
                            //    .then((res) => {
                            //        //console.log(res.data)
                            //        _this.imageData = res.data;
                            //        for (let item of _this.imageData) {
                            //            if (_this.selectSeriesList.indexOf(item.series) == -1) {
                            //                _this.selectSeriesList.push(item.series)
                            //            }
                            //        }
                            //    })
                        });
                },
                openModelToUpdate(commodityId) {
                    let _this = this;
                    _this.clrarModal();
                    axios.get(`@Url.Action("OPenModalToUpdate","Commodities")/${commodityId}`)
                        .then((res) => {
                            _this.commodityId = res.data.commodityId;
                            _this.tempStorageId = res.data.tempStorageId;
                            _this.memberId = res.data.memberId;
                            _this.commodityName = res.data.commodityName;
                            _this.commodityQuantity = res.data.commodityQuantity;
                            _this.commodityUnitPrice = res.data.commodityUnitPrice;
                            _this.deadline = res.data.deadline;
                            _this.onShelves = res.data.onShelves;

                            $("#previewImage").attr("src", `${_this.imageAddress}${res.data.prizePicture}`);
                        });
                },
                updataRawardLib(rawardId) {
                    let _this = this;

                    let request = {
                        ShowRawardId: _this.NowSelectId,
                        Name: _this.ShowRawardName,
                        Series: _this.ShowRawardSeries,
                        Firm: _this.ShowRawardFirm,
                        AddProbability: _this.ShowRwardAddProbability != "" ? _this.ShowRwardAddProbability : 0,
                        NowProbability: _this.ShowRwardNowProbability != "" ? _this.ShowRwardNowProbability : 0,
                        AllowStoreDay: _this.ShowRwardAllowStoreDay != "" ? _this.ShowRwardAllowStoreDay : 0,
                        Fare: _this.ShowRwardFare != "" ? _this.ShowRwardFare : 0,
                        OneDrawMoney: _this.ShowRwardOneDrawMoney != "" ? _this.ShowRwardOneDrawMoney : 0,
                        IsOpen: _this.ShowRwardIsOpen,
                        CreateTime: _this.ShowRwardCreateTime,
                        Introduction: _this.ShowRwardIntroduction,
                        Image: _this.ShowRwardImage,
                    };

                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    axios.put(`@Url.Action("UpdateRawardLibs","ShowRawards")/${rawardId}`, request)
                        .then((res) => {
                            $('#showDetail').modal('hide');
                            _this.getRawardLibs();
                        })
                        .catch((err) => {
                            //console.log(err.response.data);
                            _this.ErrorTitle = Object.keys(err.response.data);
                            let ArratList = [];
                            for (let item in err.response.data) {
                                ArratList.push(err.response.data[item]);
                            }
                            _this.ErrorMessage = ArratList;

                        });
                },
                deleteRawardLibs(rawardId) {
                    let _this = this;
                    Swal.fire({
                        title: '您確定要刪除此筆資料?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d15b47',
                        cancelButtonColor: '#abbac3',
                        confirmButtonText: '確認'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios.delete(`@Url.Action("Delete","ShowRawards")/${rawardId}`)
                                .then((res) => {
                                    //console.log(res)
                                    Swal.fire(
                                        `${res.data == "success" ? "資料刪除成功!" : "資料刪除失敗!"}`,
                                        '',
                                        `${res.data == "success" ? "success" : "error"}`
                                    ).then((res) => {
                                        if (res.isConfirmed) {
                                            $('#showDetail').modal('hide');
                                            _this.getRawardLibs();
                                        }
                                    })
                                });
                        }
                    })
                },
                goToDetail(rawardId) {
                    let _this = this;
                    axios.get(`@Url.Action("Index","ShowRawardItems")/${rawardId}`)
                        .then((res) => {
                            window.location.href = res.request.responseURL;
                        });
                },
                clrarModal() {
                    let _this = this;
                    _this.ShowRawardSeries = '';
                    _this.ShowRawardName = '';
                    _this.ShowRawardFirm = '';
                    _this.ShowRwardAddProbability = 0;
                    _this.ShowRwardNowProbability = 0;
                    _this.ShowRwardAllowStoreDay = 0;
                    _this.ShowRwardFare = 0;
                    _this.ShowRwardOneDrawMoney = 0;
                    _this.ShowRwardIsOpen = false;
                    _this.ShowRwardCreateTime = null;
                    _this.ShowRwardIntroduction = '';
                    _this.ShowRwardImage = '';
                    _this.NowSelectId = null;
                    _this.ErrorTitle = [];
                    _this.ErrorMessage = [];
                    _this.selectNamesList = [];
                    _this.selectImageList = [];
                    _this.nowSelectSeries = '';
                    _this.nowSelectName = '';
                    $("#previewImage").attr("src", '');
                },
                createRawardLib() {
                    let _this = this;

                    let request = {
                        Name: _this.ShowRawardName,
                        Series: _this.ShowRawardSeries,
                        Firm: _this.ShowRawardFirm,
                        AddProbability: _this.ShowRwardAddProbability != "" ? _this.ShowRwardAddProbability : 0,
                        NowProbability: _this.ShowRwardNowProbability != "" ? _this.ShowRwardNowProbability : 0,
                        AllowStoreDay: _this.ShowRwardAllowStoreDay != "" ? _this.ShowRwardAllowStoreDay : 0,
                        Fare: _this.ShowRwardFare != "" ? _this.ShowRwardFare : 0,
                        OneDrawMoney: _this.ShowRwardOneDrawMoney != "" ? _this.ShowRwardOneDrawMoney : 0,
                        IsOpen: _this.ShowRwardIsOpen,
                        CreateTime: moment(Date.now()).format('YYYY-MM-DD'),
                        Introduction: _this.ShowRwardIntroduction,
                        Image: _this.ShowRwardImage,
                    };

                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    axios.post(`@Url.Action("Create","ShowRawards")`, request)
                        .then((res) => {
                            $('#showDetail').modal('hide');
                            _this.getRawardLibs();
                            _this.clrarModal();
                        })
                        .catch((err) => {
                            //console.log(err.response.data);
                            _this.ErrorTitle = Object.keys(err.response.data);
                            let ArratList = [];
                            for (let item in err.response.data) {
                                ArratList.push(err.response.data[item]);
                            }
                            _this.ErrorMessage = ArratList;

                        });
                },
                selectPerPage(e) {
                    let _this = this;
                    let selectPerPage = parseInt(e.target.value);
                    //console.log(selectPerPage);
                    _this.setCookie('datatablePageLength', selectPerPage, 365);
                    _this.savedPageLength = selectPerPage;
                    _this.searchInput = "";
                    _this.filterDataPage();
                },
                filterDataPage() {
                    let _this = this;
                    _this.nowPage = 1;
                    _this.paginationNum = Math.ceil(_this.filterdbData.length / _this.savedPageLength);
                },
                createPicture(imageName) {
                    return `${this.imageAddress}${imageName}`;
                },
                selectSeries() {
                    let _this = this;
                    _this.selectNamesList = [];
                    _this.selectImageList = [];
                    _this.ShowRwardImage = '';
                    $("#previewImage").attr("src", '');
                    for (let item of _this.imageData) {
                        if (item.series == _this.nowSelectSeries) {
                            if (_this.selectNamesList.indexOf(item.name) == -1) {
                                _this.selectNamesList.push(item.name);
                            }
                        }
                    }
                },
                selectNames() {
                    let _this = this;
                    _this.selectImageList = [];
                    for (let item of _this.imageData) {
                        if (item.name == _this.nowSelectName) {
                            if (_this.selectImageList.indexOf(item.imageName) == -1) {
                                _this.selectImageList.push(item.imageName);
                            }
                        }
                    }
                },
                selectImage() {
                    let _this = this;
                    $("#previewImage").attr("src", `${_this.imageAddress}${_this.ShowRwardImage}`);
                },
            },
            mounted() {
                let _this = this;

                //每頁幾筆的內容
                let getCookiePage = _this.getCookie('datatablePageLength');

                if (getCookiePage == null) {
                    _this.savedPageLength = _this.defaultPageLength;
                    _this.setCookie('datatablePageLength', _this.savedPageLength, 365);
                } else {
                    _this.savedPageLength = parseInt(getCookiePage);
                }
                _this.getRawardLibs();
            },
            computed: {
                filterdbData() {
                    let _this = this;
                    let filterData = [];

                    switch (this.nowFilter) {
                        case "全部":
                            for (let item of _this.dbData) {
                                console.log(item);
                                if ((item.memberId + "").includes(_this.searchInput) ||
                                    (item.commodityId + "").includes(_this.searchInput) ||
                                    (item.tempStorageId + "").includes(_this.searchInput) ||
                                    item.deadline.includes(_this.searchInput)
                                ) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "商品ID":
                            for (let item of _this.dbData) {
                                if ((item.commodityId + "").includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "暫存倉ID":
                            for (let item of _this.dbData) {
                                if ((item.tempStorageId + "").includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "會員ID":
                            for (let item of _this.dbData) {
                                if ((item.memberId + "").includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "截止時間":
                            for (let item of _this.dbData) {
                                if (item.deadline.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                    }
                    return filterData
                },
                filterPageData() {
                    let firstNum = (this.nowPage - 1) * this.savedPageLength;
                    let lastNum;
                    let filterData = this.filterdbData;
                    let filterPageData = [];

                    if ((this.nowPage * this.savedPageLength) < this.filterdbData.length) {
                        lastNum = this.nowPage * this.savedPageLength;
                    } else {
                        lastNum = this.filterdbData.length;
                    }

                    for (let i = firstNum; i < lastNum; i++) {
                        filterPageData.push(filterData[i]);
                    }

                    return filterPageData;
                },
                seriesErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Series"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Series");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                nameErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Name"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Name");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                firmErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Firm"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Firm");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                addProErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("AddProbability"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("AddProbability");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                nowProErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("NowProbability"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("NowProbability");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                allowErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("AllowStoreDay"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("AllowStoreDay");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                fareErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Fare"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Fare");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                moneyErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("OneDrawMoney"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("OneDrawMoney");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                timeErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("CreateTime"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("CreateTime");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                imageErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Image"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Image");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                timeFilter() {
                    return this.ShowRwardCreateTime != null ? moment(this.ShowRwardCreateTime).format('YYYY-MM-DD') : moment(Date.now()).format('YYYY-MM-DD');
                },
                formatDate() {
                    return function (dateString) {
                        const date = new Date(dateString);
                        const formattedDate = date.toLocaleString();
                        return formattedDate;
                    };
                },
            },
        };

        let app = Vue.createApp(vueApp).mount("#app");
    </script>
}