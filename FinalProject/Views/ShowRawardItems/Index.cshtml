<div id="app">
    <div class="table-header mb-2">
        <h3 class="fw-bolder">
            獎池細項
        </h3>
    </div>

    <div class="d-flex">
        <a @@click="modelType='',clearModal()" class="btn btn-success text-white mb-2 me-1" data-bs-toggle="modal" data-bs-target="#showDetail">新增細項</a>
        <a @@click="modelType='insert',getInsertData()" class="btn btn-primary text-white mb-2" data-bs-toggle="modal" data-bs-target="#showDetail">批次帶入</a>
    </div>

    <div class="d-flex mb-2">

        <div class="d-flex align-items-end me-auto">
            <span style="min-width:35px">每頁:</span>
            <select class="form-select form-select-sm" @@change="selectPerPage" v-model="savedPageLength">
                <option v-for="(item,index) in perpage" :key="index" :value="item">{{item}}</option>
            </select>
            <span>筆</span>
        </div>

        <div class="d-flex">
            <select class="form-select form-select-sm" v-model.trim="nowFilter">
                <option v-for="(item,index) in filterList" :key="index" :value="item">{{item}}</option>
            </select>
            <div class="input-group input-group-merge" style="min-width:250px">
                <span class="input-group-text" id="basic-addon-search31"><i class="bx bx-search"></i></span>
                <input type="text"
                       class="form-control"
                       placeholder="Search..."
                       aria-label="Search..."
                       aria-describedby="basic-addon-search31"
                       v-model="searchInput"
                       @@keyup="filterDataPage" />
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table id="mainTable"
               class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th class="center">
                        <label>
                            <input type="checkbox" />
                            <span class="lbl"></span>
                        </label>
                    </th>
                    <th>名稱</th>
                    <th>獎品等級</th>
                    <th>大獎</th>
                    <th>數量</th>
                    <th>剩餘數量</th>
                    <th>圖片</th>
                    <th>功能</th>
                </tr>
            </thead>

            <tbody>
                <tr v-for="item in filterPageData">
                    <td class="center">
                        <label>
                            <input type="checkbox" />
                            <span class="lbl"></span>
                        </label>
                    </td>
                    <td>{{item.name}}</td>
                    <td>{{item.rawardLevel}}</td>
                    <td>
                        <input type="checkbox" :checked="item.isJackpot" disabled />
                    </td>
                    <td>{{item.num}}</td>
                    <td>{{item.laveNum}}</td>
                    <td>
                        <img width="150" :src="createPicture(item.image)" />
                    </td>
                    <td>
                        <a @@click="modelType='edit',openModelToUpdate(item.showRawardItemId)" data-bs-toggle="modal" data-bs-target="#showDetail"><i class="tf-icons bx bx-edit-alt"></i></a> |
                        <a @@click="deleteRawardLibs(item.showRawardItemId)"><i class="tf-icons bx bx-trash text-danger"></i></a>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <div class="col-md justify-content-center" :class="{'d-none':loading,'d-flex':!loading}">
        <div class="demo-inline-spacing">
            <div class="spinner-border spinner-border-lg text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <button @@click="goBack" type="button" class="btn btn-danger text-white">返回</button>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end flex-wrap">

            <li :class="{'disabled':nowPage==1,'page-item':true,'prev':true}" @@click="nowPage>1 ? nowPage-- : nowPage =1">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-left"></i>
                </a>
            </li>

            <li :class="{'active':item==nowPage,'page-item':true}" v-for="item in paginationNum" @@click="nowPage = item">
                <a class="page-link">{{item}}</a>
            </li>

            <li :class="{'disabled':nowPage==paginationNum,'page-item':true,'next':true}" @@click="nowPage<paginationNum ? nowPage++ : nowPage =paginationNum">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-right"></i>
                </a>
            </li>

        </ul>
    </nav>

    <!-- Modal -->
    <div class="modal fade" id="showDetail" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" id="modalContext">
                <form asp-controller="ShowRawardItem" asp-action="OPenModalToUpdate">

                    <div class="modal-header">
                        <template v-if="modelType == 'edit'">
                            <h4 class="modal-title fw-bolder" id="showDetailLabel">資料修改</h4>
                        </template>
                        <template v-if="modelType==''">
                            <h4 class="modal-title fw-bolder" id="showDetailLabel">資料新增</h4>
                        </template>
                        <template v-if="modelType=='insert'">
                            <h4 class="modal-title fw-bolder" id="showDetailLabel">批次加入細項</h4>
                        </template>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <template v-if="modelType=='edit'||modelType==''">
                            <table class="table-specil">
                                <tbody>
                                    <tr>
                                        <th>名稱</th>
                                        <td>
                                            <input class="form-control" v-model="ShowName" />
                                            <span class="text-danger">{{nameErrorMessage}}</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>級別</th>
                                        <td>
                                            <input class="form-control" v-model="ShowLevel" />
                                            <span class="text-danger">{{rawardLevelErrorMessage}}</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>是否為大獎</th>
                                        <td>
                                            <input class="form-check-input" type="checkbox" v-model="ShowIsJackpot" />
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>數量</th>
                                        <td>
                                            <input class="form-control" type="number" v-model="ShowNum" />
                                            <span class="text-danger">{{rawardItemNumErrorMessage}}</span>
                                        </td>
                                    </tr>
                                    <tr v-if="NowSelectId != null">
                                        <th>剩餘數量</th>
                                        <td>
                                            <input class="form-control" type="number" v-model="ShowLaveNum" />
                                            <span class="text-danger">{{rawardItemLaveNumErrorMessage}}</span>
                                        </td>
                                    </tr>
                                    <tr>
                                        <th>圖片</th>
                                        <td>
                                            <div class="imgbox">
                                                <div class="input-group mb-1">
                                                    <label class="input-group-text">選擇系列</label>
                                                    <select class="form-select h-100" @@change="selectSeries" v-model="nowSelectSeries">
                                                        <option disabled value="">---請選擇---</option>
                                                        <option v-for="item in selectSeriesList" :value="item">{{item}}</option>
                                                    </select>
                                                </div>
                                                <div class="input-group">
                                                    <label class="input-group-text">系列名稱</label>
                                                    <select class="form-select h-100" @@change="selectNames" v-model="nowSelectName">
                                                        <option disabled value="">---請選擇---</option>
                                                        <option v-for="item in selectNamesList" :value="item">{{item}}</option>
                                                    </select>
                                                </div>
                                                <div class="input-group">
                                                    <label class="input-group-text">圖片名稱</label>
                                                    <select class="form-select h-100" @@change="selectImage" v-model="ShowImage">
                                                        <option disabled value="">---請選擇---</option>
                                                        <option v-for="item in selectImageList" :value="item">{{item}}</option>
                                                    </select>
                                                </div>
                                                <img id="previewImage" src="#" alt="預覽圖片" width="200">
                                            </div>
                                            <span class="text-danger">{{rawardItemImageErrorMessage}}</span>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </template>
                        <template v-if="modelType=='insert'">
                            <div class="input-group mb-1">
                                <label class="input-group-text">選擇系列</label>
                                <select class="form-select h-100" @@change="getSeries" v-model="insertSelectSeries">
                                    <option disabled value="">---請選擇---</option>
                                    <option v-for="item in insertData" :value="item">{{item}}</option>
                                </select>
                            </div>
                            <div class="input-group">
                                <label class="input-group-text">選擇一套</label>
                                <select class="form-select h-100" v-model="insertSelectName">
                                    <option disabled value="">---請選擇---</option>
                                    <option v-for="item in insertNameDb" :value="item">{{item}}</option>
                                </select>
                            </div>
                        </template>
                    </div>
                    <div class="modal-footer">
                        <template v-if="modelType == 'edit'">
                            <button @@click="updataRawardItems(NowSelectId)" type="button" class="btn btn-primary text-white">修改</button>
                        </template>
                        <template v-if="modelType==''">
                            <button @@click="createRawardLib()" type="button" class="btn btn-primary text-white">存檔</button>
                        </template>
                        <template v-if="modelType == 'insert'">
                            <button @@click="insertRawardItems" type="button" class="btn btn-primary text-white">批次新增</button>
                        </template>
                        <button @@click="clearModal()" type="button" class="btn btn-secondary text-white" data-bs-dismiss="modal">關閉</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>
@section Scripts
    {
    <script>
        let vueApp = {

            data() {
                return {
                    //初始資料
                    dbData: [],
                    dbDataLen: 0,
                    //過濾項目
                    filterList: ["全部", "名稱", "獎品等級"],
                    nowFilter: "全部",
                    searchInput: "",
                    //MODAL目前顯示資料
                    NowSelectId: null,
                    ShowId: null,
                    ShowName: '',
                    ShowLevel: '',
                    ShowIsJackpot: false,
                    ShowNum: 0,
                    ShowLaveNum:0,
                    ShowImage: '',
                    ShowHasSelectNumber:'',
                    //錯誤訊息
                    ErrorTitle: [],
                    ErrorMessage: [],
                    //pagination
                    nowPage: 1,
                    paginationNum: null,
                    //per page
                    savedPageLength: null,
                    defaultPageLength: 10,
                    perpage: [10, 25, 50, 100],
                    //loading control
                    loading: true,
                    //MODEL要開哪個
                    modelType: '',
                    //批次增加的data
                    rawardDb:[],
                    insertNameDb:[],
                    //批次增加的總類list
                    insertData:[],
                    //批次的總類選擇
                    insertSelectSeries:'',
                    insertSelectName:'',
                    //圖片的 select
                    selectSeriesList: [],
                    selectNamesList: [],
                    selectImageList: [],
                    nowSelectSeries: '',
                    nowSelectName: '',
                    //圖庫地址
                    imageAddress: `/img/webDataPicture/`,
                }
            },
            methods: {
                getCookie(name) {
                    // 取得 Cookie
                    let cookieValue = null;
                    if (document.cookie && document.cookie !== '') {
                        let cookies = document.cookie.split(';');
                        for (var i = 0; i < cookies.length; i++) {
                            let cookie = cookies[i].trim();
                            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                break;
                            }
                        }
                    }
                    return cookieValue;
                },
                setCookie(name, value, days) {
                    // 設定 Cookie
                    let expires = '';
                    if (days) {
                        let date = new Date();
                        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                        expires = '; expires=' + date.toUTCString(); //存入cookie中的過期時間
                    }
                    document.cookie = name + '=' + encodeURIComponent(value) + expires + '; path=/';
                },
                getRawardLibs() {
                    let _this = this;
                    let id = window.location.pathname.split('/').pop();
                    _this.loading = false;
                    axios.get(`@Url.Action("getShowItems","ShowRawardItems")/${id}`)
                        .then((res) => {
                            console.log(res.data);
                            _this.dbData = res.data;
                            _this.dbDataLen = res.data.length;

                            //初始pagation
                            _this.filterDataPage();
                            _this.loading = true;

                            //取得 Image
                            axios.get(`@Url.Action("getImageStores","ImageStores")`)
                                .then((res) => {
                                    //console.log(res.data)
                                    _this.imageData = res.data;
                                    for (let item of _this.imageData) {
                                        if (_this.selectSeriesList.indexOf(item.series) == -1) {
                                            _this.selectSeriesList.push(item.series)
                                        }
                                    }
                                })
                        });
                },
                openModelToUpdate(showId) {
                    let _this = this;
                    _this.clearModal();
                    axios.get(`@Url.Action("OPenModalToUpdate","ShowRawardItems")/${showId}`)
                        .then((res) => {
                            //console.log(res);
                            _this.ShowId = res.data.showRawardId
                            _this.NowSelectId = res.data.showRawardItemId;
                            _this.ShowName = res.data.name;
                            _this.ShowLevel = res.data.rawardLevel;
                            _this.ShowIsJackpot = res.data.isJackpot;
                            _this.ShowNum = res.data.num;
                            _this.ShowLaveNum = res.data.laveNum;
                            _this.ShowImage = res.data.image;

                            $("#previewImage").attr("src", `${_this.imageAddress}${res.data.image}`);
                        });
                },
                updataRawardItems(ShowId) {
                    let _this = this;

                    let request = {
                        ShowRawardId: _this.ShowId,
                        ShowRawardItemId: _this.NowSelectId,
                        Name: _this.ShowName,
                        RawardLevel: _this.ShowLevel,
                        IsJackpot: _this.ShowIsJackpot,
                        Num: _this.ShowNum != "" ? _this.ShowNum : 0,
                        LaveNum: _this.ShowLaveNum != "" ? _this.ShowNum : 0,
                        Image: _this.ShowImage,
                    };
                    //console.log(request)
                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    axios.put(`@Url.Action("UpdateRawardItems","ShowRawardItems")/${ShowId}`, request)
                        .then((res) => {
                            $('#showDetail').modal('hide');
                            _this.getRawardLibs();
                        })
                        .catch((err) => {
                            //console.log(err.response.data);
                            _this.ErrorTitle = Object.keys(err.response.data);
                            let ArratList = [];
                            for (let item in err.response.data) {
                                ArratList.push(err.response.data[item]);
                            }
                            _this.ErrorMessage = ArratList;

                        });
                },
                deleteRawardLibs(ShowId) {
                    let _this = this;
                    Swal.fire({
                        title: '您確定要刪除此筆資料?',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d15b47',
                        cancelButtonColor: '#abbac3',
                        confirmButtonText: '確認'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios.delete(`@Url.Action("Delete","ShowRawardItems")/${ShowId}`)
                                .then((res) => {
                                    //console.log(res)
                                    Swal.fire(
                                        `${res.data == "success" ? "資料刪除成功!" : "資料刪除失敗!"}`,
                                        '',
                                        `${res.data == "success" ? "success" : "error"}`
                                    ).then((res) => {
                                        if (res.isConfirmed) {
                                            $('#showDetail').modal('hide');
                                            _this.getRawardLibs();
                                        }
                                    })
                                });
                        }
                    })
                },
                clearModal() {
                    let _this = this;
                    _this.NowSelectId = null;
                    _this.ShowId = null;
                    _this.ShowName = '';
                    _this.ShowLevel = '';
                    _this.ShowIsJackpot = false;
                    _this.ShowNum = 0;
                    _this.ShowLaveNum = 0;
                    _this.ShowImage = '';
                    _this.ErrorTitle = [];
                    _this.ErrorMessage = [];
                    _this.nowSelectName = "";
                    _this.selectNamesList = [];
                    _this.selectImageList = [];
                    _this.insertSelectSeries = '';
                    _this.insertSelectName = '';
                    $("#previewImage").attr("src", '');
                },
                createRawardLib() {
                    let _this = this;
                    let id = window.location.pathname.split('/').pop();

                    let request = {
                        ShowRawardId: id,
                        RawardItemId: 0,
                        Name: _this.ShowName,
                        RawardLevel: _this.ShowLevel,
                        IsJackpot: _this.ShowIsJackpot,
                        Num: _this.ShowNum,
                        LaveNum: _this.ShowNum,
                        Image: _this.ShowImage,
                    };

                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    axios.post(`@Url.Action("Create","ShowRawardItems")`, request)
                        .then((res) => {
                            $('#showDetail').modal('hide');
                            _this.getRawardLibs();
                            _this.clearModal();
                        })
                        .catch((err) => {
                            //console.log(err.response.data);
                            //console.log(err.request.status);
                            if (err.request.status >= 500) {
                                Swal.fire(
                                    `操作失敗，請洽管理人員!`,
                                    '',
                                    `error`
                                ).then((res) => {
                                    if (res.isConfirmed) {
                                        $('#showDetail').modal('hide');
                                        _this.getRawardLibs();
                                    }
                                })
                            };
                            _this.ErrorTitle = Object.keys(err.response.data);
                            let ArratList = [];
                            for (let item in err.response.data) {
                                ArratList.push(err.response.data[item]);
                            }
                            _this.ErrorMessage = ArratList;

                        });
                },
                selectPerPage(e) {
                    let _this = this;
                    let selectPerPage = parseInt(e.target.value);
                    //console.log(selectPerPage);
                    _this.setCookie('datatablePageLength', selectPerPage, 365);
                    _this.savedPageLength = selectPerPage;
                    _this.searchInput = "";
                    _this.filterDataPage();
                },
                filterDataPage() {
                    let _this = this;
                    _this.nowPage = 1;
                    _this.paginationNum = Math.ceil(_this.filterdbData.length / _this.savedPageLength);
                },
                goBack() {
                    window.history.back();
                },
                getInsertData(){
                    let _this = this;
                    _this.insertData = [];
                    _this.rawardDb = [];
                    _this.insertNameDb = [];
                    _this.insertSelectSeries = '';
                    axios.get(`@Url.Action("getInsert","ShowRawardItems")`)
                        .then((res) => {
                            _this.rawardDb = res.data;
                            for (let item of _this.rawardDb) {
                                if (_this.insertData.indexOf(item.series) == -1) {
                                    _this.insertData.push(item.series)
                                }
                            }
                        });
                },
                getSeries() {
                    let _this = this;
                    _this.insertNameDb = [];
                    for (let item of _this.rawardDb) {
                        if (item.series == _this.insertSelectSeries) {
                            _this.insertNameDb.push(item.name);
                        }
                    }
                },
                insertRawardItems() {
                    let _this = this;
                    //showRawardId
                    let id = window.location.pathname.split('/').pop();
                    //rawardId
                    let selectId = 0;
                    for (let item of _this.rawardDb) {
                        if (item.series == _this.insertSelectSeries && item.name == _this.insertSelectName) {
                            selectId = item.rawardId
                        }
                    };

                    let request = {
                        id:id,
                        rawardId: selectId
                    };

                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();

                    axios.post(`@Url.Action("insert","ShowRawardItems")`,request)
                        .then((res) => {
                            //console.log(res.data);
                            let title = '';
                            let text = '';
                            let icon = '';
                            if(res.data != 0){
                                title = '新增成功!';
                                text = `共新增${res.data}筆資料!`;
                                icon = 'success';
                            }else{
                                title = '新增失敗!';
                                text = `該一番賞無細項!`;
                                icon = 'error';
                            }
                            Swal.fire({
                                title: title,
                                text: text,
                                icon: icon,
                                confirmButtonColor: '#d15b47',
                                confirmButtonText: '確認'
                            })
                                .then((res) => {
                                    $('#showDetail').modal('hide');
                                    _this.getRawardLibs();                                 
                                });
                        })
                        .catch((err) => {
                            //console.log(err);
                            //console.log(err.request.status);
                            if (err.request.status >= 500) {
                                Swal.fire(
                                    `操作失敗，請洽管理人員!`,
                                    '',
                                    `error`
                                ).then((res) => {
                                    if (res.isConfirmed) {
                                        $('#showDetail').modal('hide');
                                        _this.getRawardLibs();
                                    }
                                })
                            };
                        });
                },
                createPicture(imageName) {
                    return `${this.imageAddress}${imageName}`;
                },
                selectSeries() {
                    let _this = this;
                    _this.selectNamesList = [];
                    _this.selectImageList = [];
                    _this.ShowImage = '';
                    $("#previewImage").attr("src", '');
                    for (let item of _this.imageData) {
                        if (item.series == _this.nowSelectSeries) {
                            if (_this.selectNamesList.indexOf(item.name) == -1) {
                                _this.selectNamesList.push(item.name);
                            }
                        }
                    }
                },
                selectNames() {
                    let _this = this;
                    _this.selectImageList = [];
                    for (let item of _this.imageData) {
                        if (item.name == _this.nowSelectName) {
                            if (_this.selectImageList.indexOf(item.imageName) == -1) {
                                _this.selectImageList.push(item.imageName);
                            }
                        }
                    }
                },
                selectImage() {
                    let _this = this;
                    $("#previewImage").attr("src", `${_this.imageAddress}${_this.ShowImage}`);
                },
            },
            mounted() {
                let _this = this;
                //每頁幾筆的內容
                let getCookiePage = _this.getCookie('datatablePageLength');

                if (getCookiePage == null) {
                    _this.savedPageLength = _this.defaultPageLength;
                    _this.setCookie('datatablePageLength', _this.savedPageLength, 365);
                } else {
                    _this.savedPageLength = parseInt(getCookiePage);
                }
                _this.getRawardLibs();
            },
            computed: {
                filterdbData() {
                    let _this = this;
                    let filterData = [];

                    switch (this.nowFilter) {
                        case "全部":
                            for (let item of _this.dbData) {
                                if (item.name.includes(_this.searchInput) || item.rawardLevel.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "名稱":
                            for (let item of _this.dbData) {
                                if (item.name.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "獎品等級":
                            for (let item of _this.dbData) {
                                if (item.rawardLevel.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                    }
                    return filterData
                },
                filterPageData() {
                    let firstNum = (this.nowPage - 1) * this.savedPageLength;
                    let lastNum;
                    let filterData = this.filterdbData;
                    let filterPageData = [];

                    if ((this.nowPage * this.savedPageLength) < this.filterdbData.length) {
                        lastNum = this.nowPage * this.savedPageLength;
                    } else {
                        lastNum = this.filterdbData.length;
                    }

                    for (let i = firstNum; i < lastNum; i++) {
                        filterPageData.push(filterData[i]);
                    }

                    return filterPageData;
                },
                nameErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Name"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Name");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                rawardLevelErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("RawardLevel"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("RawardLevel");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                rawardItemNumErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Num"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Num");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                rawardItemLaveNumErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("LaveNum"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("LaveNum");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
                rawardItemImageErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Image"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Image");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
            },
        };

        let app = Vue.createApp(vueApp).mount("#app");
    </script>
}
