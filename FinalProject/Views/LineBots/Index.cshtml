<div id="app">
    <div class="table-header mb-2">
        <h3 class="fw-bolder">
            Line機器人
        </h3>
    </div>

    <div class="d-flex">
        <a @@click="clrarModal()" class="btn btn-success text-white mb-2" data-bs-toggle="modal" data-bs-target="#showDetail">發布訊息</a>
    </div>

    <div class="d-flex mb-2">

        <div class="d-flex align-items-end me-auto">
            <span style="min-width:35px">每頁:</span>
            <select class="form-select form-select-sm" @@change="selectPerPage" v-model="savedPageLength">
                <option v-for="(item,index) in perpage" :key="index" :value="item">{{item}}</option>
            </select>
            <span>筆</span>
        </div>

        <div class="d-flex">
            <select class="form-select form-select-sm" v-model.trim="nowFilter">
                <option v-for="(item,index) in filterList" :key="index" :value="item">{{item}}</option>
            </select>
            <div class="input-group input-group-merge" style="min-width:250px">
                <span class="input-group-text" id="basic-addon-search31"><i class="bx bx-search"></i></span>
                <input type="text"
                       class="form-control"
                       placeholder="Search..."
                       aria-label="Search..."
                       aria-describedby="basic-addon-search31"
                       v-model="searchInput"
                       @@keyup="filterDataPage" />
            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table id="mainTable"
               class="table table-striped table-bordered table-hover">
            <thead>
                <tr>
                    <th class="center">
                        <label>
                            <input type="checkbox" />
                            <span class="lbl"></span>
                        </label>
                    </th>
                    <th>發布時間</th>
                    <th>訊息類別</th>
                    <th>內容</th>
                </tr>
            </thead>

            <tbody>
                <tr v-for="item in filterPageData">
                        <td class="center">
                            <label>
                                <input type="checkbox" />
                                <span class="lbl"></span>
                            </label>
                        </td>
                    <td>{{formattedDate(item.sendTime)}}</td>
                    <td>{{changeLineValue(item.messageType)}}</td>
                    <td>{{item.message}}</td>
                    </tr>              
            </tbody>           
        </table>       
    </div>

    <div class="col-md justify-content-center" :class="{'d-none':loading,'d-flex':!loading}">
        <div class="demo-inline-spacing">
            <div class="spinner-border spinner-border-lg text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-end flex-wrap">

            <li :class="{'disabled':nowPage==1,'page-item':true,'prev':true}" @@click="nowPage>1 ? nowPage-- : nowPage =1">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-left"></i>
                </a>
            </li>

            <li :class="{'active':item==nowPage,'page-item':true}" v-for="item in paginationNum" @@click="nowPage = item">
                <a class="page-link">{{item}}</a>
            </li>

            <li :class="{'disabled':nowPage==paginationNum,'page-item':true,'next':true}" @@click="nowPage<paginationNum ? nowPage++ : nowPage =paginationNum">
                <a class="page-link">
                    <i class="tf-icon bx bx-chevrons-right"></i>
                </a>
            </li>

        </ul>
    </nav>

    <!-- Modal -->
    <div class="modal fade" id="showDetail" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content" id="modalContext">
                <form asp-controller="LineBots" asp-action="getRawardLibs">

                    <div class="modal-header">
                        <h4 class="modal-title fw-bolder" id="showDetailLabel">廣播</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table-specil">
                            <tbody>
                                <tr>
                                    <th>訊息類別</th>
                                    <td>
                                        <select class="form-select h-100" v-model="LineType">
                                            <option disabled value="">---請選擇---</option>
                                            <option v-for="item in LineBotType" :value="item">{{changeLineValue(item)}}</option>
                                        </select>
                                        <span class="text-danger">{{typeErrorMessage}}</span>
                                    </td>
                                </tr>
                                <tr>
                                    <th>內容</th>
                                    <td>
                                        <textarea id="myTextarea" class="form-control" v-model="LineMessage"></textarea>
                                        <span class="text-danger">{{msgErrorMessage}}</span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                          <button @@click="createRawardLib()" type="button" class="btn btn-primary text-white">發布</button>
                        <button @@click="clrarModal()" type="button" class="btn btn-secondary text-white" data-bs-dismiss="modal">關閉</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

</div>
@section Scripts 
{
    <script src="~/lib/tinymce/tinymce.min.js"></script>
    <script>

        let vueApp = {

            data(){
                return {
                    //初始資料
                    dbData:[],
                    dbDataLen: 0,
                    //過濾項目
                    filterList: ["全部", "內容", "類別"],
                    nowFilter:"全部",
                    searchInput:"",
                    //MODAL目前顯示資料
                    LineType: '',
                    LineMessage: '',
                    NowSelectId:null,
                    //錯誤訊息
                    ErrorTitle:[],
                    ErrorMessage:[],
                    //pagination
                    nowPage:1,
                    paginationNum:null,
                    //per page
                    savedPageLength:null,
                    defaultPageLength:10,
                    perpage:[10,25,50,100],
                    //loading control
                    loading:true,
                    // LineBot 類型
                    LineBotType: ["text", "sticker"],
                    // 表情符號
                    Emoji: ["(Love)", "(Laugh)", "(Abash)", "(Cry)", "(Angry)","(Stare)","(Cool)"],
                    EmojiCode:["001","002","004","005","007","016","021"],
                    Tiny:null,
                }
            },
            methods:{              
                getCookie(name) {
                    // 取得 Cookie
                    let cookieValue = null;
                    if (document.cookie && document.cookie !== '') {
                        let cookies = document.cookie.split(';');
                        for (var i = 0; i < cookies.length; i++) {
                            let cookie = cookies[i].trim();
                            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                break;
                            }
                        }
                    }
                    return cookieValue;
                },
                setCookie(name, value, days) {
                    // 設定 Cookie
                    let expires = '';
                    if (days) {
                        let date = new Date();
                        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                        expires = '; expires=' + date.toUTCString(); //存入cookie中的過期時間
                    }
                    document.cookie = name + '=' + encodeURIComponent(value) + expires + '; path=/';
                },
                getRawardLibs(){
                    let _this = this;
                    _this.loading = false;
                    axios.get(`@Url.Action("getRawardLibs","LineBots")`)
                        .then((res) => {
                            //console.log(res.data);
                            _this.dbData = res.data;
                            _this.dbDataLen = res.data.length;

                            //初始pagation
                            _this.filterDataPage();
                            _this.loading = true;
                        });
                },
                clrarModal() {
                    let _this = this;
                    _this.LineType = '';
                    _this.LineMessage = '';
                    _this.NowSelectId = null;
                    _this.ErrorTitle = [];
                    _this.ErrorMessage = [];
                    // Tiny 本身是一個陣列，若要使用該陣列的方法，使用前一定要確定本體是第幾個索引
                    _this.Tiny[0].setContent('')                   
                },
                createRawardLib(){
                    let _this = this;
                    let str = _this.LineMessage;
                    let hasEmojis = false;
                    let message = null;
                    let request = null;
                    let EmojisArr = [];

                    // 輸入的文字若有表情的話需要將有表情的部分轉為 "$"
                    for(let i = 0; i <  _this.Emoji.length;i++){
                        while (str.includes(_this.Emoji[i])) {
                            hasEmojis = true;
                            EmojisArr.push({
                                Index: str.indexOf(_this.Emoji[i]),
                                length: 1,
                                ProductID: "5ac1bfd5040ab15980c9b435",
                                EmojiId: _this.EmojiCode[i]
                            });
                            str = str.slice(0, str.indexOf(_this.Emoji[i])) + "$" + str.slice(str.indexOf(_this.Emoji[i]) + _this.Emoji[i].length);
                        }
                    }

                    if (hasEmojis) {

                        message = {
                            Messages: [
                                {   
                                    "Type": _this.LineType,
                                    "Text": str,
                                    "Emojis": EmojisArr
                                }
                            ]
                        }

                        request = {
                            messageType: _this.LineType,
                            Messages: message,
                        };
                    }else{
                        message = {
                            Messages:[{ Type: _this.LineType, Text: _this.LineMessage }]
                        }

                        request = {
                            messageType: _this.LineType,
                            Messages: message,
                        };                   
                    }

                    axios.defaults.headers.common['RequestVerificationToken'] = $('input[name="__RequestVerificationToken"]').val();
                    axios.post(`@Url.Action("Create","LineBots")`, request)
                        .then((res) => {
                            $('#showDetail').modal('hide');
                            _this.getRawardLibs();
                            _this.clrarModal();
                        })
                        .catch((err) => {
                            //console.log(err.response.data);
                            _this.ErrorTitle = Object.keys(err.response.data);
                            let ArratList = [];
                            for (let item in err.response.data) {
                                ArratList.push(err.response.data[item]);
                            }
                            _this.ErrorMessage = ArratList;

                        });
                },
                selectPerPage(e){
                    let _this = this;
                    let selectPerPage = parseInt(e.target.value);
                    //console.log(selectPerPage);
                    _this.setCookie('datatablePageLength', selectPerPage, 365);
                    _this.savedPageLength = selectPerPage;
                    _this.searchInput = "";
                    _this.filterDataPage();
                },
                filterDataPage(){
                    let _this = this;
                    _this.nowPage = 1;
                    _this.paginationNum = Math.ceil(_this.filterdbData.length / _this.savedPageLength);
                },
                changeLineValue(item){
                    let type = '';
                    switch(item){
                        case "text":
                            type = "文字訊息"
                            break
                        case "sticker":
                            type = "貼圖"
                            break
                    }
                    return type
                },
                formattedDate(item) {
                    const date = new Date(item);
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0');
                    const day = String(date.getDate()).padStart(2, '0');
                    const hours = String(date.getHours()).padStart(2, '0');
                    const minutes = String(date.getMinutes()).padStart(2, '0');
                    const seconds = String(date.getSeconds()).padStart(2, '0');
                    return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;
                },
                createMessageArea(){
                    let _this = this;
                    tinymce.init({
                        selector: 'textarea#myTextarea',
                        menubar: '',
                        content: '',
                        toolbar: 'undo redo | styleselect | 新增表情',
                        setup: function (editor) {
                            /* Menu items are recreated when the menu is closed and opened, so we need
                               a variable to store the toggle menu item state. */

                            var toggleState = false;
                            editor.on('init', () => {
                                editor.setContent(_this.LineMessage);
                            });
                            editor.on('input', () => {
                                _this.LineMessage = editor.getContent({ format: 'text' });
                            });
                            /* example, adding a toolbar menu button */
                            editor.ui.registry.addMenuButton('新增表情', {
                                text: '新增表情',
                                fetch: function (callback) {
                                    var items = [
                                        {
                                            type: 'nestedmenuitem',
                                            text: '饅頭人表情包',
                                            getSubmenuItems: function () {
                                                return [
                                                    {
                                                        type: 'menuitem',
                                                        text: '愛心眼',
                                                        onAction: function () {
                                                            editor.insertContent(`(Love)`);
                                                            _this.LineMessage += `(Love)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '大笑',
                                                        onAction: function () {
                                                            editor.insertContent('(Laugh)');
                                                            _this.LineMessage += `(Laugh)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '驚訝',
                                                        onAction: function () {
                                                            editor.insertContent('(Abash)');
                                                            _this.LineMessage += `(Abash)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '哭哭',
                                                        onAction: function () {
                                                            editor.insertContent('(Cry)');
                                                            _this.LineMessage += `(Cry)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '生氣',
                                                        onAction: function () {
                                                            editor.insertContent('(Angry)');
                                                            _this.LineMessage += `(Angry)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '瞪',
                                                        onAction: function () {
                                                            editor.insertContent('(Stare)');
                                                            _this.LineMessage += `(Stare)`;
                                                        }
                                                    },
                                                    {
                                                        type: 'menuitem',
                                                        text: '墨鏡跩臉',
                                                        onAction: function () {
                                                            editor.insertContent('(Cool)');
                                                            _this.LineMessage += `(Cool)`;
                                                        }
                                                    },
                                                ];
                                            }
                                        },
                                    ];
                                    callback(items);
                                }
                            });

                        },
                    }).then((res)=>{
                        // 一定要在此 Tiny 處裡完成之後才能將本體以正確的格式儲存在 DATA 中
                        _this.Tiny = res;
                    });
                },
            },
            mounted() {
                let _this = this;

                //每頁幾筆的內容
                let getCookiePage = _this.getCookie('datatablePageLength');

                if (getCookiePage == null) {
                    _this.savedPageLength = _this.defaultPageLength;
                    _this.setCookie('datatablePageLength', _this.savedPageLength, 365);
                }else
                {
                    _this.savedPageLength = parseInt(getCookiePage);
                }                              
                _this.getRawardLibs();
                _this.createMessageArea();
            },
            computed:{
                filterdbData() {
                    let _this = this;
                    let filterData = [];

                    switch (this.nowFilter) {
                        case "全部":
                            for (let item of _this.dbData) {
                                if (item.message.includes(_this.searchInput) || item.messageType.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "內容":
                            for (let item of _this.dbData) {
                                if (item.message.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                        case "類別":
                            for (let item of _this.dbData) {
                                if (item.messageType.includes(_this.searchInput)) {
                                    filterData.push(item)
                                }
                            }
                            break;
                    }
                    return filterData
                },
                filterPageData() {
                    let firstNum = (this.nowPage - 1) * this.savedPageLength;
                    let lastNum;
                    let filterData = this.filterdbData;
                    let filterPageData = [];

                    if ((this.nowPage * this.savedPageLength) < this.filterdbData.length) {
                        lastNum = this.nowPage * this.savedPageLength;
                    } else {
                        lastNum = this.filterdbData.length;
                    }

                    for (let i = firstNum; i < lastNum; i++) {
                        filterPageData.push(filterData[i]);
                    }

                    return filterPageData;
                },
                typeErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("messageType"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("messageType");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    }else{
                        return
                    }
                },
                msgErrorMessage() {
                    let hasTitle = this.ErrorTitle.some(e => e.includes("Messages"));
                    if (hasTitle) {
                        let index = this.ErrorTitle.indexOf("Messages");
                        let msg = this.ErrorMessage[index].join(", ")
                        return msg
                    } else {
                        return
                    }
                },
            },
        };

        let app = Vue.createApp(vueApp).mount("#app");     
    </script>
}
