@model List<chosen.ViewModel.SubmitQuestionViewModel>

@{
    ViewData["Title"] = "Index";
}

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@* <link> 標籤引用的是DataTables的CSS樣式表，用於設置表格的外觀風格，例如表格邊框、文字顏色、背景色等等。*@

@*bootstrap5*@
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.dataTables.min.css" rel="stylesheet">
<link href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.bootstrap5.min.css" rel="stylesheet" />
<link href="~/css/breakingnews.css" rel="stylesheet" />
<link href="~/css/returnrecord.css" rel="stylesheet" />



<style>
    /* 設定 DataTable 的主題 */
    .dataTables_wrapper {
        /*background-color: #f9f9f9;*/
        /* border: 1px solid #ddd;*/
        padding: 10px;
        border-radius: 5px;
    }

        /* 設定表格樣式 */
        .dataTables_wrapper table {
            border-collapse: collapse;
            border-spacing: 0;
            width: 100%;
        }

        .dataTables_wrapper th,
        .dataTables_wrapper td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
            font-weight: bold;
        }


        .dataTables_wrapper thead {
         
        }

    /*回報單紀錄*/
    .announcement-container {
        width: 100%; /* 設置寬度為100% */
        height: 100%; /* 設置高度為100% */

    }

    /*  跳出的表單的聊天氣泡*/
    .modal-body {
        display: flex;
        flex-direction: column;
    }

    .left-message-box {
        align-self: flex-start;
        position: relative;
        width: 400px;
        height: 200px;
        padding: 10px;
        border: 1px solid cyan;
        border-radius: 8px;
        margin-bottom: 10px;
    }

        .left-message-box::before {
            position: absolute;
            left: -10px;
            top: 20%;
            transform: translateY(-50%);
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-right: 10px solid cyan;
            content: "";
        }

        .left-message-box::after {
            position: absolute;
            left: -8px;
            top: 20%;
            transform: translateY(-50%);
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-right: 10px solid #fff;
            content: "";
        }


    .right-message-box {
        align-self: flex-end;
        position: relative;
        right: 0;
        width: 400px;
        height: 200px;
        padding: 10px;
        border: 1px solid red;
        border-radius: 8px;
        margin-bottom: 10px;
    }

        .right-message-box::before {
            position: absolute;
            right: -10px; /* 將 left 改為 right */
            transform: translateY(-50%);
            top: 20%;
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-left: 10px solid red; /* 將 border-right 改為 border-left */
            content: "";
        }

        .right-message-box::after {
            position: absolute;
            right: -8px; /* 將 left 改為 right */
            top: 20%;
            transform: translateY(-50%);
            border-top: 6px solid transparent;
            border-bottom: 6px solid transparent;
            border-left: 10px solid #fff; /* 將 border-right 改為 border-left */
            content: "";
        }

    .scrollable-modal-body {
        max-height: 700px; /* Set the desired height */
        overflow-y: auto;
    }

    .timestamp {
        position: absolute;
        bottom: 0;
        right: 0;
        font-size: 20px;
        color: gray;
    }
</style>
<body>
    <div class="announcement-container">
        <div class="container">
            <h2>回報單紀錄</h2>
           
            <table id="reportTable" class="table table-bordered dt-responsive" style="width:100%">
                <thead>
                    <tr>
                        <th>服務編號</th>
                        <th>提交日期</th>
                        <th>問題分類</th>
                        <th>問題標題</th>
                        <th>狀態</th>
                        <th>回覆</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.QuestionReportID</td>
                            <td>@item.QuestionDate</td>
                            <td>@item.QuestionType</td>
                            <td>@item.QuestionTitle</td>
                            <td>@item.State</td>
                            <td>
                                <button type="button" class="" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="showMessageModal(@item.QuestionReportID)">
                                    查看回覆
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        @* 跳出的視窗*@
        <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog" role="document">
                <div class="modal-content ">

                    <div class="modal-header">
                        <h5 class="modal-title">回報單紀錄</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div id="modalBody" class="modal-body scrollable-modal-body"></div>

                    <div class="modal-footer">
                        <textarea id="Messages" class="form-control" rows="5" placeholder="在此输入内容"></textarea>
                        <button id="submitBtn">送出</button>
                    </div>

                </div>
            </div>
        </div>

    </div>
</body>
@section Scripts
{
    @*bootstrap5*@
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.4/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>
    <script src="https://cdn.datatables.net/responsive/2.4.1/js/responsive.bootstrap5.min.js"></script>
    <script src="~/js/breakingnews_index.js"></script>

    <script>
        //將後端的資料轉換成了JavaScript可以理解的格式，並將其傳遞到前端的modeltemp變數中。這樣，您就可以在JavaScript程式碼中使用modeltemp來操作和顯示從後端傳遞過來的資料。
        //全域變數
        var modeltemp = @Html.Raw(Json.Serialize(Model));
        console.log("modeltemp:" + modeltemp);
        var qId;
       

        $(document).ready(function () {
            var storedPageIndex = sessionStorage.getItem('NowPageIndex');
            var table = $('table').DataTable({
                lengthChange: false, // 隱藏顯示筆數
                pageLength: 10, // 設置顯示筆數
                ordering: false, // 隱藏升降冪
                columns: [
                    { "data": "服務編號", "width": "14%" },
                    { "data": "提交日期", "width": "14%" },
                    { "data": "問題分類", "width": "14%" },
                    { "data": "問題標題", "width": "14%" },
                    { "data": "狀態", "width": "14%" },
                    { "data": "查看回覆", "width": "14%" },
                ],
                language: {
                    url: 'https://cdn.datatables.net/plug-ins/1.13.4/i18n/zh-HANT.json'
                },

                // 刷新時設定起始位置
                //displayStart 的值是從 0 開始的，所以如果你的每頁顯示筆數為 5，而 NowPageIndex 是從 1 開始的，因此需要將 NowPageIndex 減去 1 並乘以 5 來計算 displayStart 的值。
                //根據 sessionStorage 中的 NowPageIndex 設定 DataTable 的當前頁面，從而在刷新時恢復到正確的頁面。
                displayStart: storedPageIndex ? (storedPageIndex - 1) * 5 : 0,

                drawCallback: function () {
                    // 當點擊 DataTable 中的內容時觸發
                    $('table').on('click', 'tr', function () {
                        var rowData = table.row(this).data();
                        if (rowData) {
                            var currentPageIndex = table.page.info().page + 1;
                            sessionStorage.setItem('NowPageIndex', currentPageIndex);
                        }
                    });
                }
            });
            // DataTable 換頁事件
            table.on('page.dt', function () {
                var currentPageIndex = table.page.info().page + 1;
                sessionStorage.setItem('NowPageIndex', currentPageIndex);
            });

            // 清除 sessionStorage 中的 NowPageIndex 值
            if (storedPageIndex) {
                sessionStorage.removeItem('NowPageIndex');
            };

         
            //送出按鈕
            window.onload = function () {
                document.getElementById('submitBtn').addEventListener('click', function () {
                    var textarea = document.getElementById('Messages'); // 获取文本区域的元素
                    var input = $('#Messages').val(); // 获取文本区域的值
                    console.log(input);

                    //將存取的時間格式化成: 2023-05-16 04:03:41
                    var currentDate = new Date();
                    var formattedDate = currentDate.getFullYear() + '-' + padNumber(currentDate.getMonth() + 1) + '-' + padNumber(currentDate.getDate());
                    var formattedTime = padNumber(currentDate.getHours()) + ':' + padNumber(currentDate.getMinutes()) + ':' + padNumber(currentDate.getSeconds());

                    var data = {
                        QuestionReportID: qId,
                        Message: input,
                        WhoAnswer:1,
                        DateTimesSecond: formattedDate + ' ' + formattedTime
                    };
                    function padNumber(number) {
                        return number.toString().padStart(2, '0');
                    }
                    console.log(data);

                    var url = 'https://localhost:44300/ReturnRecord/SaveData';

                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    })
                        .then(response => {
                            // 处理响应结果
                            if (response.ok) {
                                // 请求成功
                                alert('問題已成功送出,請耐心等候回應');
                                $('#Messages').val('');
                            } else {
                                // 请求失败
                                alert('發生錯誤無法將問題送出,請洽客服人員');
                            }
                        })
                        .catch(error => {
                            // 处理错误
                            alert('发生错误:', error);
                        });
                });
            };
        });

        //查看回覆按鈕
        function showMessageModal(questionReportID, questionHistoryID) {
            debugger;
            var questionData;
            qId = questionReportID;
            console.log("QuestionReportId:" + questionReportID);
            console.log(modeltemp);
         
            for(let i =0;i<modeltemp.length;i++){


                if (modeltemp[i].QuestionReportID == questionReportID) {

                    questionData = modeltemp[i].QuestionhistoriesList;
                }
            }          
            if (questionData) {
                var modalBody = document.getElementById("modalBody");
                modalBody.innerHTML = '';


                for (let j = 0; j < questionData.length; j++) {
                    var leftMessageBox = document.createElement('div');
                    leftMessageBox.className = 'left-message-box'
                    // var leftMessageBox = modalBody.querySelector(".left-message-box");
                    //var rightMessageBox = modalBody.querySelector(".right-message-box");

                    // 清空消息框内容
                    //leftMessageBox.innerHTML = '';
                    //rightMessageBox.innerHTML = '';

                    console.log("questionData[" + j + "]:", questionData[j]);

                    var message = questionData[j].Message;
                    var DateTimes = questionData[j].DateTimeSecond;
                    var WhosAnswers = questionData[j].WhoAnswer;
                    var historyID = questionData[j].QuestionHistoryId; // 添加了questionHistoryID

                    console.log('Messages:', message);
                    console.log('DateTimes:', DateTimes);
                    console.log('WhoAnswers:', WhosAnswers);
                    console.log('historyID:', historyID);
                    console.log(questionData[j].questionHistoryId);
                    var formattedDateTime = "回覆時間: " + formatDateTime(DateTimes); // 格式化日期時間字符串


                    var messageBox = document.createElement("div");
                    messageBox.textContent = message;    
                    
                    if (WhosAnswers == 1) {
                        messageBox.classList.add("left-message-box");
                    }
                    if (WhosAnswers == 2) {
                        messageBox.classList.add("right-message-box");
                    }


                    var timestamp = document.createElement("div");
                    timestamp.textContent = formattedDateTime;
                    timestamp.classList.add("timestamp");
                    
                    messageBox.appendChild(timestamp);

                    
                    modalBody.appendChild(messageBox);
               }                         
            }        

        };
        //格式化日期時間字符
        function formatDateTime(dateTime) {
            var dateObj = new Date(dateTime);
            var year = dateObj.getFullYear();
            var month = ("0" + (dateObj.getMonth() + 1)).slice(-2);
            var day = ("0" + dateObj.getDate()).slice(-2);
            var hours = ("0" + dateObj.getHours()).slice(-2);
            var minutes = ("0" + dateObj.getMinutes()).slice(-2);
            var seconds = ("0" + dateObj.getSeconds()).slice(-2);

            return year + "-" + month + "-" + day + " " + hours + ":" + minutes + ":" + seconds;
        }
       


    </script>
}

